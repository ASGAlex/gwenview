#MIN_CONFIG(3.1)
#
# _hack suffix
#
AC_MSG_CHECKING(if we should add the "_hack" suffix to Gwenview)

AC_ARG_ENABLE(gwenview-hack,
[  --enable-gwenview-hack  Add the "_hack" suffix to Gwenview files],
[if test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  AC_DEFINE(GV_HACK_SUFFIX,1,[Define if you want to add the "_hack" suffix to Gwenview])
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no)])

AM_CONDITIONAL(GV_HACK_SUFFIX, test "$enable_gwenview_hack" = yes)


#
# KIPI
#
AC_MSG_CHECKING(if Gwenview should be compiled with KIPI support)
AC_ARG_ENABLE(kipi,
[  --enable-kipi           Use KIPI, 'KDE Image Plugin Interface'],
[if test "$enableval" = yes; then
  AC_MSG_RESULT(yes)
  want_kipi="yes"
else
  AC_MSG_RESULT(no)
fi], [AC_MSG_RESULT(no); want_kipi="no"])

if test "$want_kipi" = "yes"; then
  KDE_CHECK_HEADER(libkipi/interface.h,
    have_kipi=yes,
    have_kipi=no)

  if test "$have_kipi" = "yes"; then
	AC_DEFINE(HAVE_KIPI, 1, [If we have libkipi installed])
	LIB_KIPI="-lkipi"
	AC_SUBST(LIB_KIPI)
  else
    AC_WARN([Can't find KIPI headers, Gwenview won't be compiled with KIPI support])
  fi
fi

#
# Imlib/Mosfet scaling
#
AM_PROG_AS

# MMX test duped from kdelibs/kdefx - it should be probably moved to admin/
dnl -----------------------------------------------------
dnl IA32 checks
dnl -----------------------------------------------------
case $host_cpu in
  i*86 )
  AC_MSG_CHECKING(for assembler support for IA32 extensions)
 
  dnl MMX check
  AC_TRY_COMPILE(, [ __asm__("pxor %%mm0, %%mm0" : : : "%mm0") ],
  [
    echo $ECHO_N "MMX yes$ECHO_C"
    AC_DEFINE_UNQUOTED(HAVE_X86_MMX, 1, [Define to 1 if the assembler supports MMX instructions.])
  ], [ echo $ECHO_N "MMX no$ECHO_C" ])

  dnl SSE check
  AC_TRY_COMPILE(,[ __asm__("xorps %%xmm0, %%xmm0" : : : "%xmm0") ],
  [
    echo $ECHO_N ", SSE yes$ECHO_C"
    AC_DEFINE_UNQUOTED(HAVE_X86_SSE, 1, [Define to 1 if the assembler supports SSE instructions.])
  ], [ echo $ECHO_N ", SSE no$ECHO_C" ])

  dnl SSE2 check
  AC_TRY_COMPILE(, [ __asm__("xorpd %%xmm0, %%xmm0" : : : "%xmm0") ],
  [
    echo $ECHO_N ", SSE2 yes$ECHO_C"
    AC_DEFINE_UNQUOTED(HAVE_X86_SSE2, 1, [Define to 1 if the assembler supports SSE2 instructions.])
  ], [ echo $ECHO_N ", SSE2 no$ECHO_C" ])
 
  dnl 3DNOW check
  AC_TRY_COMPILE(, [ __asm__("femms" : : ) ],
  [
    echo $ECHO_N ", 3DNOW yes$ECHO_C"
    AC_DEFINE_UNQUOTED(HAVE_X86_3DNOW, 1, [Define to 1 if the assembler supports 3DNOW instructions.])
  ], [ echo $ECHO_N ", 3DNOW no$ECHO_C" ])
  echo
  ;;
  powerpc )
  AC_MSG_CHECKING(for assembler support for AltiVec instructions)
  dnl AltiVec check
  AC_TRY_COMPILE(, [ __asm__("mtspr 256, %0\n\t" "vand %%v0, %%v0, %%v0" : : "r"(-1) ) ],
  [
    echo $ECHO_N " yes$ECHO_C"
    AC_DEFINE_UNQUOTED(HAVE_PPC_ALTIVEC, 1, [Define to 1 if the assembler supports AltiVec instructions.])
  ], [ echo $ECHO_N ", AltiVec no$ECHO_C" ])
  echo
  ;;
esac

AM_CONFIG_HEADER([gvimageutils/asm_config.h])
